var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = RvSpectML","category":"page"},{"location":"#RvSpectML","page":"Home","title":"RvSpectML","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [RvSpectML,RvSpectML.NEID ]","category":"page"},{"location":"#RvSpectML.apply_doppler_factor!-Union{Tuple{S}, Tuple{S,Real}} where S<:RvSpectML.AbstractSpectra","page":"Home","title":"RvSpectML.apply_doppler_factor!","text":"Multiply spectra's Î»s by dopplerfactor and update spectra metadata, so dopplerfactor knows how to undo the transform.\n\n\n\n\n\n","category":"method"},{"location":"#RvSpectML.calc_doppler_factor-Tuple{Real,Real}","page":"Home","title":"RvSpectML.calc_doppler_factor","text":"Compute Doppler boost factor (relativistic) for rv and v_perp in km/s\n\n\n\n\n\n","category":"method"},{"location":"#RvSpectML.calc_doppler_factor-Tuple{Real}","page":"Home","title":"RvSpectML.calc_doppler_factor","text":"Compute Doppler boost factor (non-relativistic) for rv in km/s\n\n\n\n\n\n","category":"method"},{"location":"#RvSpectML.calc_normalization-Union{Tuple{ACL}, Tuple{ACL}} where ACL<:RvSpectML.AbstractChunckList","page":"Home","title":"RvSpectML.calc_normalization","text":"Calc normalization of spectra based on average flux in a ChunkList. \n\n\n\n\n\n","category":"method"},{"location":"#RvSpectML.make_grid_for_chunck-Union{Tuple{ACLT}, Tuple{ACLT,Integer}} where ACLT<:RvSpectML.AbstractChunckListTimeseries","page":"Home","title":"RvSpectML.make_grid_for_chunck","text":"Create a range with equal spacing between points with end points set based on union of all chunks in timeseries. Takes ChunkListTimeseries, chunk index, and optional an oversample_factor (1). \n\n\n\n\n\n","category":"method"},{"location":"#RvSpectML.predict_line_width-Tuple{Real}","page":"Home","title":"RvSpectML.predict_line_width","text":"Estimate line width based on stellar Teff (K) and optionally v_rot (km/s).  Output in km/s.\n\n\n\n\n\n","category":"method"},{"location":"#RvSpectML.read_manifest-Tuple{String}","page":"Home","title":"RvSpectML.read_manifest","text":"Read manifest containing filename, bjd, target, and optionally additional metadata from CSV file. \n\n\n\n\n\n","category":"method"},{"location":"#RvSpectML.read_metadata_from_fits","page":"Home","title":"RvSpectML.read_metadata_from_fits","text":"Read metadata in FITS header and return data for keys in fields_str/fields as a Dict. \n\n\n\n\n\n","category":"function"},{"location":"#RvSpectML.NEID.make_manifest-Tuple{String}","page":"Home","title":"RvSpectML.NEID.make_manifest","text":"Create Dataframe containing filenames and key data for all files neid*.fits in directory\n\n\n\n\n\n","category":"method"},{"location":"#RvSpectML.NEID.read_data","page":"Home","title":"RvSpectML.NEID.read_data","text":"Read NEID (non-solar) data from FITS file, and return in a Spectra2DBasic object.\n\n\n\n\n\n","category":"function"},{"location":"#RvSpectML.NEID.read_header-Tuple{String}","page":"Home","title":"RvSpectML.NEID.read_header","text":"\n\n\n\n\n\n","category":"method"},{"location":"#RvSpectML.NEID.read_solar_data","page":"Home","title":"RvSpectML.NEID.read_solar_data","text":"Read NEID Solar data from FITS file, and return in a Spectra2DBasic object.\n\n\n\n\n\n","category":"function"}]
}
