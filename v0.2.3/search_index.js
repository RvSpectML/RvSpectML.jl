var documenterSearchIndex = {"docs":
[{"location":"types/","page":"Types","title":"Types","text":"CurrentModule = RvSpectML","category":"page"},{"location":"types/#Types-Exported-by-RvSpectML","page":"Types","title":"Types Exported by RvSpectML","text":"","category":"section"},{"location":"types/","page":"Types","title":"Types","text":"Pages = [\"types.md\"]\nDepth = 3","category":"page"},{"location":"types/#General-purpose","page":"Types","title":"General purpose","text":"","category":"section"},{"location":"types/","page":"Types","title":"Types","text":"Modules = [RvSpectML ]\nPrivate = false\nOrder = [:type]","category":"page"},{"location":"types/#RV-Related-Algorithms","page":"Types","title":"RV-Related Algorithms","text":"","category":"section"},{"location":"types/","page":"Types","title":"Types","text":"Modules = [RvSpectML.DCPCA, RvSpectML.LineFinder ] #, RvSpectML.PPCA ]\nPrivate = false\nOrder = [:type]","category":"page"},{"location":"types/#Interpolation-Algorithms","page":"Types","title":"Interpolation Algorithms","text":"","category":"section"},{"location":"types/","page":"Types","title":"Types","text":"Modules = [RvSpectML.LinearInterpolation, RvSpectML.SincInterpolation, RvSpectML.TemporalGPInterpolation ]  # RvSpectML.GPInterpolation,\nPrivate = false\nOrder = [:type]","category":"page"},{"location":"types/#Other","page":"Types","title":"Other","text":"","category":"section"},{"location":"types/","page":"Types","title":"Types","text":"Modules = [Pipeline  ]\nPrivate = false\nOrder = [:type]","category":"page"},{"location":"functions/","page":"Functions","title":"Functions","text":"CurrentModule = RvSpectML","category":"page"},{"location":"functions/#Functions-Exported-by-RvSpectML","page":"Functions","title":"Functions Exported by RvSpectML","text":"","category":"section"},{"location":"functions/","page":"Functions","title":"Functions","text":"Pages = [\"functions.md\"]\nDepth = 3","category":"page"},{"location":"functions/#General-purpose","page":"Functions","title":"General purpose","text":"","category":"section"},{"location":"functions/","page":"Functions","title":"Functions","text":"Modules = [RvSpectML ]\nPrivate = false\nOrder = [:function ]","category":"page"},{"location":"functions/#RvSpectML.bin_spectra_consecutive-Tuple{RvSpectMLBase.AbstractSpectralTimeSeriesCommonWavelengths, Integer}","page":"Functions","title":"RvSpectML.bin_spectra_consecutive","text":"binspectraconsecutive Bins consecutive spectra from a SpectralTimeSeriesCommonWavelengths object\n\nWARNING:  Simply takes consecutive spectra, so some bins may be from spectra that weren't taken close together. TODO:  Create version that pays attention to timestamps.\n\n\n\n\n\n","category":"method"},{"location":"functions/#RvSpectML.bin_spectra_max_Δt-Union{Tuple{AT}, Tuple{T}, Tuple{RvSpectMLBase.AbstractSpectralTimeSeriesCommonWavelengths, AT, Real}} where {T<:Real, AT<:AbstractVector{T}}","page":"Functions","title":"RvSpectML.bin_spectra_max_Δt","text":"binspectramax_Δt Bins spectra from a SpectralTimeSeriesCommonWavelengths object with a maximum spacing between observation times\n\n\n\n\n\n","category":"method"},{"location":"functions/#RvSpectML.bin_spectra_nightly-Union{Tuple{AT}, Tuple{T}, Tuple{RvSpectMLBase.AbstractSpectralTimeSeriesCommonWavelengths, AT}} where {T<:Real, AT<:AbstractVector{T}}","page":"Functions","title":"RvSpectML.bin_spectra_nightly","text":"binspectranightly Bins spectra from a SpectralTimeSeriesCommonWavelengths object with a maximum spacing between observation times\n\n\n\n\n\n","category":"method"},{"location":"functions/#RvSpectML.bin_times_consecutive-Union{Tuple{AT}, Tuple{T}, Tuple{AT, Integer}} where {T<:Real, AT<:AbstractVector{T}}","page":"Functions","title":"RvSpectML.bin_times_consecutive","text":"bintimesconsecutive( times, n ) Computes mean times from conseuctive bins of n times (to go with binconsecutivespectra). Returns floor(length(times)/n) elements.\n\nWARNING:  Simply takes consecutive times, so some bins may be from spectra that weren't taken close together. TODO:  Create version that pays attention to timestamps.\n\n\n\n\n\n","category":"method"},{"location":"functions/#RvSpectML.calc_d2fluxdlnlambda2!-Union{Tuple{T3}, Tuple{T2}, Tuple{T1}, Tuple{AbstractVector{T1}, AbstractVector{T1}, AbstractVector{T2}}} where {T1<:Real, T2<:Real, T3<:Real}","page":"Functions","title":"RvSpectML.calc_d2fluxdlnlambda2!","text":"Estimate numerical second derivative of fluxes given wavelengths. \n\n\n\n\n\n","category":"method"},{"location":"functions/#RvSpectML.calc_d2fluxdlnlambda2-Union{Tuple{T2}, Tuple{T1}, Tuple{AbstractVector{T1}, AbstractVector{T2}}} where {T1<:Real, T2<:Real}","page":"Functions","title":"RvSpectML.calc_d2fluxdlnlambda2","text":"Estimate numerical second derivative of fluxes given wavelengths. \n\n\n\n\n\n","category":"method"},{"location":"functions/#RvSpectML.calc_depth_and_expected_rv_precission-Union{Tuple{AA1}, Tuple{AR}, Tuple{ST}, Tuple{ST, AR, Integer}} where {ST<:RvSpectMLBase.AbstractSpectra2D, AR<:AbstractRange{Int64}, AA1<:AbstractVector{Int64}}","page":"Functions","title":"RvSpectML.calc_depth_and_expected_rv_precission","text":"calc_depth_and_expected_rv_precission(spectrum, pixels_index, order_index; smooth_factor) Calculate expected RV uncertainty for one portion of spectrum given by pixels and order indicies. Assumes only photon noise with given variances. Returns (depth, exp_σ_rv)\n\n\n\n\n\n","category":"method"},{"location":"functions/#RvSpectML.calc_dfluxdlnlambda!-Union{Tuple{T3}, Tuple{T2}, Tuple{T1}, Tuple{AbstractVector{T1}, AbstractVector{T2}, AbstractVector{T3}}} where {T1<:Real, T2<:Real, T3<:Real}","page":"Functions","title":"RvSpectML.calc_dfluxdlnlambda!","text":"Estimate numerical derivative of fluxes given wavelengths. \n\n\n\n\n\n","category":"method"},{"location":"functions/#RvSpectML.calc_dfluxdlnlambda-Union{Tuple{T2}, Tuple{T1}, Tuple{AbstractVector{T1}, AbstractVector{T2}}} where {T1<:Real, T2<:Real}","page":"Functions","title":"RvSpectML.calc_dfluxdlnlambda","text":"Estimate numerical derivative of fluxes given wavelengths. \n\n\n\n\n\n","category":"method"},{"location":"functions/#RvSpectML.calc_formal_rv_precission-Union{Tuple{ACLT}, Tuple{AS}, Tuple{ST}, Tuple{AS, ACLT}} where {ST<:RvSpectMLBase.AbstractSpectra, AS<:AbstractVector{ST}, ACLT<:RvSpectMLBase.AbstractChunkListTimeseries}","page":"Functions","title":"RvSpectML.calc_formal_rv_precission","text":"calc_formal_rv_precission(spectra, chunklist_timeseries; smooth_factor) Calculate expected RV uncertainty for each spectrum in an array of spectra and corresponding chunklist_timeseries, Assumies only photon noise with given variances.\n\n\n\n\n\n","category":"method"},{"location":"functions/#RvSpectML.calc_formal_rv_precission-Union{Tuple{ACL}, Tuple{ST}, Tuple{ST, ACL}} where {ST<:RvSpectMLBase.AbstractSpectra2D, ACL<:RvSpectMLBase.AbstractChunkList}","page":"Functions","title":"RvSpectML.calc_formal_rv_precission","text":"calc_formal_rv_precission(spectrum, chunklist; smooth_factor) Calculate expected RV uncertainty for one spectrum and corresponding chunklist, Assumes only photon noise with given variances.\n\n\n\n\n\n","category":"method"},{"location":"functions/#RvSpectML.numerical_deriv-Union{Tuple{AA2}, Tuple{T2}, Tuple{AA1}, Tuple{T1}, Tuple{AA1, AA2}} where {T1<:Real, AA1<:AbstractVector{T1}, T2<:Real, AA2<:AbstractVector{T2}}","page":"Functions","title":"RvSpectML.numerical_deriv","text":"numerical_deriv( x, y) Calculate simple estimate of numerical derivative\n\n\n\n\n\n","category":"method"},{"location":"functions/#RvSpectML.rms_rvs_within_night-Union{Tuple{}, Tuple{T2}, Tuple{T1}} where {T1<:Real, T2<:Real}","page":"Functions","title":"RvSpectML.rms_rvs_within_night","text":"rmsrvwithin_night(times, rvs) Return RMS of RVs taken within the same night\n\n\n\n\n\n","category":"method"},{"location":"functions/#RV-Related-Algorithms","page":"Functions","title":"RV-Related Algorithms","text":"","category":"section"},{"location":"functions/","page":"Functions","title":"Functions","text":"Modules = [ RvSpectML.DCPCA, RvSpectML.LineFinder] #, RvSpectML.PPCA ]\nPrivate = false\nOrder = [:function ]","category":"page"},{"location":"functions/#Interpolation-Algorithms","page":"Functions","title":"Interpolation Algorithms","text":"","category":"section"},{"location":"functions/","page":"Functions","title":"Functions","text":"Modules = [RvSpectML.LinearInterpolation, RvSpectML.SincInterpolation, RvSpectML.TemporalGPInterpolation ]  # RvSpectML.GPInterpolation,\nPrivate = false\nOrder = [:function ]","category":"page"},{"location":"functions/#RvSpectML.LinearInterpolation.interp_chunk_to_grid_linear!-Union{Tuple{AR}, Tuple{AC}, Tuple{T2}, Tuple{T1}, Tuple{AbstractVector{T1}, AbstractVector{T2}, AC, AR}} where {T1<:Real, T2<:Real, AC<:RvSpectMLBase.AbstractChunkOfSpectrum, AR<:Union{AbstractVector{T2}, AbstractRange}}","page":"Functions","title":"RvSpectML.LinearInterpolation.interp_chunk_to_grid_linear!","text":"interp_chunk_to_grid_linear!( flux_out, var_out, chunk_of_spectrum, wavelengths ) Return spectra interpolated onto a grid of points using linear interpolation.\n\nArguments:\n\nflux_out: (results stored into this array)\nvar_out: (results stored into this array)\nchunkofspectrum\nwavelengths: AbstractRange or AbstractArray of locations where chunk is to be interpolated to\n\nOptional Arguments:\n\nFilter: Vector with pre-allocated workspace (if length>=1)\n\nReturns\n\nflux_out\n\n\n\n\n\n","category":"method"},{"location":"functions/#RvSpectML.LinearInterpolation.interp_chunk_to_grid_linear-Union{Tuple{AR}, Tuple{T2}, Tuple{AC}, Tuple{AC, AR}} where {AC<:RvSpectMLBase.AbstractChunkOfSpectrum, T2<:Real, AR<:Union{AbstractVector{T2}, AbstractRange}}","page":"Functions","title":"RvSpectML.LinearInterpolation.interp_chunk_to_grid_linear","text":"interp_chunk_to_grid_linear( chunk_of_spectrum, wavelengths ) Return spectra interpolated onto a grid of points using linear interpolation.\n\nArguments:\n\nchunkofspectrum\nwavelengths: AbstractRange or AbstractArray of locations where chunk is to be interpolated to\n\nReturns\n\nflux_out\n\n\n\n\n\n","category":"method"},{"location":"functions/#RvSpectML.LinearInterpolation.interp_chunk_to_shifted_grid_linear!-Union{Tuple{AR}, Tuple{AC}, Tuple{T2}, Tuple{T1}, Tuple{AbstractVector{T1}, AbstractVector{T2}, AC, AR, Real}} where {T1<:Real, T2<:Real, AC<:RvSpectMLBase.AbstractChunkOfSpectrum, AR<:Union{AbstractVector{T2}, AbstractRange}}","page":"Functions","title":"RvSpectML.LinearInterpolation.interp_chunk_to_shifted_grid_linear!","text":"interp_chunk_to_grid_linear!( flux_out, var_out, chunk_of_spectrum, wavelengths ) Return spectra interpolated onto a grid of points using linear interpolation.\n\nArguments:\n\nflux_out: (results stored into this array)\nvar_out: (results stored into this array)\nchunkofspectrum\nwavelengths: AbstractRange or AbstractArray of locations where chunk is to be interpolated to\nboostfactor: divide wavelengths by boostfactor\n\nOptional Arguments:\n\nFilter: Vector with pre-allocated workspace (if length>=1)\n\nReturns\n\nflux_out\n\n\n\n\n\n","category":"method"},{"location":"functions/#RvSpectML.LinearInterpolation.interp_chunk_to_shifted_grid_linear-Union{Tuple{AR}, Tuple{T2}, Tuple{AC}, Tuple{AC, AR, Real}} where {AC<:RvSpectMLBase.AbstractChunkOfSpectrum, T2<:Real, AR<:Union{AbstractVector{T2}, AbstractRange}}","page":"Functions","title":"RvSpectML.LinearInterpolation.interp_chunk_to_shifted_grid_linear","text":"`interpchunktoshiftedgridlinear( chunkofspectrum, wavelengths, boostfactor ) Return spectra interpolated onto a grid of points using linear interpolation.\n\nArguments:\n\nchunkofspectrum\nwavelengths: AbstractRange or AbstractArray of locations where chunk is to be interpolated to\nboostfactor: divide wavelengths by boostfactor\n\nOptional Arguments:\n\nFilter: Vector with pre-allocated workspace (if length>=1)\n\nReturns\n\nflux_out\n\n\n\n\n\n","category":"method"},{"location":"functions/#RvSpectML.LinearInterpolation.make_interpolator_linear_var-Union{Tuple{Union{AS, AC}}, Tuple{AC}, Tuple{AS}} where {AS<:RvSpectMLBase.AbstractSpectra, AC<:RvSpectMLBase.AbstractChunkOfSpectrum}","page":"Functions","title":"RvSpectML.LinearInterpolation.make_interpolator_linear_var","text":"Return interpolator for variances in spectra. \n\n\n\n\n\n","category":"method"},{"location":"functions/#RvSpectML.SincInterpolation.interp_chunk_to_grid_sinc!-Union{Tuple{AR}, Tuple{AC}, Tuple{T2}, Tuple{T1}, Tuple{AbstractVector{T1}, AbstractVector{T2}, AC, AR}} where {T1<:Real, T2<:Real, AC<:RvSpectMLBase.AbstractChunkOfSpectrum, AR<:Union{AbstractVector{T2}, AbstractRange}}","page":"Functions","title":"RvSpectML.SincInterpolation.interp_chunk_to_grid_sinc!","text":"interp_chunk_to_grid_sinc!( flux_out, var_out, chunk_of_spectrum, wavelengths ) Return spectra interpolated onto a grid of points using sinc interpolation.\n\nArguments:\n\nflux_out: (results stored into this array)\nvar_out: (results stored into this array)\nchunkofspectrum\nwavelengths: AbstractRange or AbstractArray of locations where chunk is to be interpolated to\n\nOptional Arguments:\n\nFilter: Vector with pre-allocated workspace (if length>=1)\n\nReturns\n\nflux_out\n\n\n\n\n\n","category":"method"},{"location":"functions/#RvSpectML.SincInterpolation.interp_chunk_to_grid_sinc-Union{Tuple{AR}, Tuple{T2}, Tuple{AC}, Tuple{AC, AR}} where {AC<:RvSpectMLBase.AbstractChunkOfSpectrum, T2<:Real, AR<:Union{AbstractVector{T2}, AbstractRange}}","page":"Functions","title":"RvSpectML.SincInterpolation.interp_chunk_to_grid_sinc","text":"interp_chunk_to_grid_sinc( chunk_of_spectrum, wavelengths ) Return spectra interpolated onto a grid of points using sinc interpolation.\n\nArguments:\n\nchunkofspectrum\nwavelengths: AbstractRange or AbstractArray of locations where chunk is to be interpolated to\n\nReturns\n\nflux_out\n\n\n\n\n\n","category":"method"},{"location":"functions/#RvSpectML.SincInterpolation.interp_chunk_to_shifted_grid_sinc!-Union{Tuple{AR}, Tuple{AC}, Tuple{T2}, Tuple{T1}, Tuple{AbstractVector{T1}, AbstractVector{T2}, AC, AR, Real}} where {T1<:Real, T2<:Real, AC<:RvSpectMLBase.AbstractChunkOfSpectrum, AR<:Union{AbstractVector{T2}, AbstractRange}}","page":"Functions","title":"RvSpectML.SincInterpolation.interp_chunk_to_shifted_grid_sinc!","text":"interp_chunk_to_shifted_grid_sinc!( flux_out, var_out, chunk_of_spectrum, wavelengths, boost_factor ) Return spectra interpolated onto a grid of points using sinc interpolation.\n\nArguments:\n\nflux_out: (results stored into this array)\nvar_out: (results stored into this array)\nchunkofspectrum\nwavelengths: AbstractRange or AbstractArray of locations where chunk is to be interpolated to\nboostfactor: divide wavelengths by boostfactor\n\nOptional Arguments:\n\nFilter: Vector with pre-allocated workspace (if length>=1)\n\nReturns\n\nflux_out\n\n\n\n\n\n","category":"method"},{"location":"functions/#RvSpectML.SincInterpolation.interp_chunk_to_shifted_grid_sinc-Union{Tuple{AR}, Tuple{T2}, Tuple{AC}, Tuple{AC, AR, Real}} where {AC<:RvSpectMLBase.AbstractChunkOfSpectrum, T2<:Real, AR<:Union{AbstractVector{T2}, AbstractRange}}","page":"Functions","title":"RvSpectML.SincInterpolation.interp_chunk_to_shifted_grid_sinc","text":"interp_chunk_to_shifted_grid_sinc( chunk_of_spectrum, wavelengths, boost_factor ) Return spectra interpolated onto a grid of points using sinc interpolation.\n\nArguments:\n\nchunkofspectrum\nwavelengths: AbstractRange or AbstractArray of locations where chunk is to be interpolated to\nboostfactor: divide wavelengths by boostfactor\n\nOptional Arguments:\n\nFilter: Vector with pre-allocated workspace (if length>=1)\n\nReturns\n\nflux_out\n\n\n\n\n\n","category":"method"},{"location":"functions/#RvSpectML.SincInterpolation.spectra_interpolate-Union{Tuple{V4}, Tuple{T4}, Tuple{V3}, Tuple{T3}, Tuple{V2}, Tuple{T2}, Tuple{V1}, Tuple{T1}, Tuple{V1, V2, V3}} where {T1<:Real, V1<:AbstractVector{T1}, T2<:Real, V2<:AbstractVector{T2}, T3<:Real, V3<:AbstractVector{T3}, T4<:Real, V4<:AbstractVector{T4}}","page":"Functions","title":"RvSpectML.SincInterpolation.spectra_interpolate","text":"Original author: Joe Ninan Converted to Julia and optimized by Christian Gilbertson Further adapted/optimized by Eric Ford Additional optimizations possible by preallocating arrasy for minargs, Nminargs, minvalues, FilterValues and OldYCoords.\n\n\n\n\n\n","category":"method"},{"location":"functions/#RvSpectML.TemporalGPInterpolation.construct_gp_posterior-Union{Tuple{AA4}, Tuple{T4}, Tuple{AA3}, Tuple{T3}, Tuple{AA2}, Tuple{T2}, Tuple{AA1}, Tuple{T1}, Tuple{AA1, AA2}} where {T1<:Real, AA1<:AbstractVector{T1}, T2<:Real, AA2<:AbstractVector{T2}, T3<:Real, AA3<:AbstractVector{T3}, T4<:Real, AA4<:AbstractVector{T4}}","page":"Functions","title":"RvSpectML.TemporalGPInterpolation.construct_gp_posterior","text":"construct_gp_posterior(xobs, yobs; sigmasq_obs, use_logx, use_logy, smooth_factor, boost_factor ) Inputs:\n\nxobs: x locations where data is provided\nyobs: y values of data to condition on\n\nOptional Inputs:\n\nsigmasq_obs: variances for y values being conditioned on\nuse_logx: If true, take log's of x values before fitting GP\nuse_logy: If true, perform log transform on y's\nsmooth_factor: scales GP hyperparameters so as to result in smoother GP posterior (1)\nboostfactor: scales xobs by 1/boostfactor (1)\n\nReturns:\n\nPosterior GP at locations xpred given training data\n\n\n\n\n\n","category":"method"},{"location":"functions/#RvSpectML.TemporalGPInterpolation.construct_gp_prior-Tuple{}","page":"Functions","title":"RvSpectML.TemporalGPInterpolation.construct_gp_prior","text":"construct_gp_prior() Returns a GP prior using a Matern 5/2 kernel and specified parameters Optional Inputs:\n\nsmoothfactorσ²: Multiplies variance for GP kernel (1)\nsmoothfactorl: Multiplies length scale for GP kernel (1)\nσ²: Variance for GP kernel (0.5)\nl: length scale for GP kernel (5.8e-5)\n\n\n\n\n\n","category":"method"},{"location":"functions/#RvSpectML.TemporalGPInterpolation.interp_chunk_to_grid_gp_temporal!-Union{Tuple{AR}, Tuple{AC}, Tuple{AA2}, Tuple{T2}, Tuple{AA1}, Tuple{T1}, Tuple{AA1, AA2, AC, AR}} where {T1<:Real, AA1<:AbstractVector{T1}, T2<:Real, AA2<:AbstractVector{T2}, AC<:RvSpectMLBase.AbstractChunkOfSpectrum, AR<:Union{AbstractVector{T2}, AbstractRange}}","page":"Functions","title":"RvSpectML.TemporalGPInterpolation.interp_chunk_to_grid_gp_temporal!","text":"interp_chunk_to_grid_gp_temporal( chunk_of_spectrum, wavelengths ) Return spectra interpolated onto a grid of points using linear interpolation.\n\nArguments:\n\nchunkofspectrum\nwavelengths: AbstractRange or AbstractArray of locations where chunk is to be interpolated to\n\nReturns\n\nflux_out\n\n\n\n\n\n","category":"method"},{"location":"functions/#RvSpectML.TemporalGPInterpolation.interp_chunk_to_grid_gp_temporal-Union{Tuple{AR}, Tuple{T2}, Tuple{AC}, Tuple{AC, AR}} where {AC<:RvSpectMLBase.AbstractChunkOfSpectrum, T2<:Real, AR<:Union{AbstractVector{T2}, AbstractRange}}","page":"Functions","title":"RvSpectML.TemporalGPInterpolation.interp_chunk_to_grid_gp_temporal","text":"interp_chunk_to_grid_gp_temporal( chunk_of_spectrum, wavelengths ) Return spectra interpolated onto a grid of points using linear interpolation.\n\nArguments:\n\nchunkofspectrum\nwavelengths: AbstractRange or AbstractArray of locations where chunk is to be interpolated to\n\nReturns\n\nflux_out\n\n\n\n\n\n","category":"method"},{"location":"functions/#RvSpectML.TemporalGPInterpolation.interp_chunk_to_shifted_grid_gp_temporal!-Union{Tuple{AR}, Tuple{AC}, Tuple{AA2}, Tuple{T2}, Tuple{AA1}, Tuple{T1}, Tuple{AA1, AA2, AC, AR, Real}} where {T1<:Real, AA1<:AbstractVector{T1}, T2<:Real, AA2<:AbstractVector{T2}, AC<:RvSpectMLBase.AbstractChunkOfSpectrum, AR<:Union{AbstractVector{T2}, AbstractRange}}","page":"Functions","title":"RvSpectML.TemporalGPInterpolation.interp_chunk_to_shifted_grid_gp_temporal!","text":"interp_chunk_to_grid_gp_temporal!( flux_out, var_out, chunk_of_spectrum, wavelengths ) Return spectra interpolated onto a grid of points using linear interpolation.\n\nArguments:\n\nflux_out: (results stored into this array)\nvar_out: (results stored into this array)\nchunkofspectrum\nwavelengths: AbstractRange or AbstractArray of locations where chunk is to be interpolated to\nboostfactor: divide wavelengths by boostfactor\n\nOptional Arguments:\n\nFilter: Vector with pre-allocated workspace (if length>=1)\n\nReturns\n\nflux_out\n\n\n\n\n\n","category":"method"},{"location":"functions/#RvSpectML.TemporalGPInterpolation.interp_chunk_to_shifted_grid_gp_temporal-Union{Tuple{AR}, Tuple{T2}, Tuple{AC}, Tuple{AC, AR, Real}} where {AC<:RvSpectMLBase.AbstractChunkOfSpectrum, T2<:Real, AR<:Union{AbstractVector{T2}, AbstractRange}}","page":"Functions","title":"RvSpectML.TemporalGPInterpolation.interp_chunk_to_shifted_grid_gp_temporal","text":"`interpchunktoshiftedgridgptemporal( chunkofspectrum, wavelengths, boost_factor ) Return spectra interpolated onto a grid of points using linear interpolation.\n\nArguments:\n\nchunkofspectrum\nwavelengths: AbstractRange or AbstractArray of locations where chunk is to be interpolated to\nboostfactor: divide wavelengths by boostfactor\n\nOptional Arguments:\n\nFilter: Vector with pre-allocated workspace (if length>=1)\n\nReturns\n\nflux_out\n\n\n\n\n\n","category":"method"},{"location":"functions/#RvSpectML.TemporalGPInterpolation.predict_mean-Union{Tuple{AA3}, Tuple{T3}, Tuple{AGP}} where {AGP<:Distributions.Distribution{Distributions.Multivariate, Distributions.Continuous}, T3<:Real, AA3<:AbstractVector{T3}}","page":"Functions","title":"RvSpectML.TemporalGPInterpolation.predict_mean","text":"predictgpmean(gp, xpred ; uselogx, uselogy) Inputs:\n\ngp:\nxpred: Locations to predict GP at\n\nOptional inputs:\n\nuse_logx: If true, apply log transform to xpred before evaluating GP\n\nReturns vector of means of GP posterior at locations in xpred.\n\n\n\n\n\n","category":"method"},{"location":"functions/#Other","page":"Functions","title":"Other","text":"","category":"section"},{"location":"functions/","page":"Functions","title":"Functions","text":"Modules = [Pipeline  ]\nPrivate = false\nOrder = [:function]","category":"page"},{"location":"functions/#RvSpectML.Pipeline.prepare_line_list-Union{Tuple{SpecT}, Tuple{String, AbstractVector{SpecT}, RvSpectMLBase.Pipeline.PipelinePlan}} where SpecT<:RvSpectMLBase.AbstractSpectra","page":"Functions","title":"RvSpectML.Pipeline.prepare_line_list","text":"preparelinelist( linelistfn, allspectra, pipeline; recalc, convertairtovacuum, orderstouse, Δvtoavoidtellurics, vcentertoavoidtellurics ) linelistfn is the full path to the line list file linelistfn is loaded as a VALD mask if it contains substring \"VALD\", and linelistfn is loaded as an ESPRESSO mask if it contains the substring \"espresso.mas\". convertairtovacuum is a boolean (defualt value true) that determines whether to convert to vaccum wavelengths when loading VALD and ESPRESSO masks.\n\n\n\n\n\n","category":"method"},{"location":"contents/","page":"Overview","title":"Overview","text":"CurrentModule = RvSpectML","category":"page"},{"location":"contents/#API-Overview","page":"Overview","title":"API Overview","text":"","category":"section"},{"location":"contents/","page":"Overview","title":"Overview","text":"Pages = [\"modules.md\",\"functions.md\", \"types.md\", \"internals.md\"]\nDepth = 5","category":"page"},{"location":"longlist/","page":"Index","title":"Index","text":"CurrentModule = RvSpectML","category":"page"},{"location":"longlist/#Index","page":"Index","title":"Index","text":"","category":"section"},{"location":"longlist/","page":"Index","title":"Index","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"CurrentModule = RvSpectML","category":"page"},{"location":"#RvSpectML","page":"Home","title":"RvSpectML","text":"","category":"section"},{"location":"#Getting-Started","page":"Home","title":"Getting Started","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Install Julia 1.5.  On Penn State's ICS-ACI, it is avaliable at  /gpfs/group/ebf11/default/julia/bin/julia.\nInstall the RvSpectML package and it's dependencies.  From julia","category":"page"},{"location":"","page":"Home","title":"Home","text":"import Pkg\nPkg.add(\"RvSpectML\")\nPkg.instantiate()","category":"page"},{"location":"","page":"Home","title":"Home","text":"Create a file examples/data_paths.jl specifying what directories on your system contain the relevant input data files.  For some of the first example scripts, you'd set  expres_data_path or solar_data_path or ancilary_solar_data_path like:","category":"page"},{"location":"","page":"Home","title":"Home","text":"expres_data_path = \"/gpfs/group/ebf11/default/ebf11/expres/inputs/\"\nsolar_data_path = \"/gpfs/group/ebf11/default/ebf11/neid_solar/data\"\nancilary_solar_data_path = \"/gpfs/group/ebf11/default/ebf11/neid_solar/data\"\noutput_dir = joinpath(homedir(),\"examples/output\")","category":"page"},{"location":"","page":"Home","title":"Home","text":"which are the paths to the required files for the examples ICS-ACI.  If you're saving outputs, then you'll likely want to set output_dir, too.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Start julia in the RvSpectML directory and activate the associated Project.","category":"page"},{"location":"","page":"Home","title":"Home","text":"> julia --project=.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Run an example script or two.  E.g.,","category":"page"},{"location":"","page":"Home","title":"Home","text":"include(\"examples/calc_rvs_ccf_std.jl\")","category":"page"},{"location":"","page":"Home","title":"Home","text":"Tinker with some of the parameters in examples/param.jl or the example scripts.\nLet us know as you encounter any issues.\nIf you intend to contribute to the RvSpectML package, then please fork the main repository, use Julia's package manager to add your repo and set it into develop mode.  For a simpel bug fix, a simple pull request is probably ok.  For feature additions or non-trivial changes, please create a branch of your repo to use for the pull request.","category":"page"},{"location":"#Other-packages-in-the-[RvSpectML-ecosystem](https://github.com/RvSpectML):","page":"Home","title":"Other packages in the RvSpectML ecosystem:","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"RvSpectMLBase\nRvSpectML\nEchelleInstruments\nEchelleCCFs\nScalpels\nRvSpectMLPlots^[unreg]","category":"page"},{"location":"","page":"Home","title":"Home","text":"[unreg]: This package is not yet registerd in Julia's general registry yet.","category":"page"},{"location":"internals/","page":"Internals","title":"Internals","text":"CurrentModule = RvSpectML","category":"page"},{"location":"internals/#RvSpectML-Internals","page":"Internals","title":"RvSpectML Internals","text":"","category":"section"},{"location":"internals/","page":"Internals","title":"Internals","text":"As a heads up, these functions and types are more likely to change going forward than functions and types that are exported.  ","category":"page"},{"location":"internals/","page":"Internals","title":"Internals","text":"Pages = [\"internals.md\"]\nDepth = 3","category":"page"},{"location":"internals/#Functions","page":"Internals","title":"Functions","text":"","category":"section"},{"location":"internals/#General-purpose","page":"Internals","title":"General purpose","text":"","category":"section"},{"location":"internals/","page":"Internals","title":"Internals","text":"Modules = [RvSpectML ]\nPublic = false\nOrder = [ :function ]","category":"page"},{"location":"internals/#RvSpectML.bin_times-Union{Tuple{AT}, Tuple{T}, Tuple{RvSpectMLBase.AbstractSpectralTimeSeriesCommonWavelengths, AT, Integer}} where {T<:Real, AT<:AbstractVector{T}}","page":"Internals","title":"RvSpectML.bin_times","text":"bintimes() Bins times from a SpectralTimeSeriesCommonWavelengths object using the groupings from timeidx in the metadata.\n\n\n\n\n\n","category":"method"},{"location":"internals/#RvSpectML.calc_chunk_rvs_from_taylor_expansion-Union{Tuple{RT}, Tuple{DT}, Tuple{T2}, Tuple{MT}, Tuple{T1}, Tuple{STS}} where {STS<:RvSpectMLBase.AbstractSpectralTimeSeriesCommonWavelengths, T1<:Real, MT<:AbstractVector{T1}, T2<:Real, DT<:AbstractVector{T2}, RT<:AbstractUnitRange}","page":"Internals","title":"RvSpectML.calc_chunk_rvs_from_taylor_expansion","text":"calc_chunk_rvs_from_taylor_expansion( spectra ) Inputs:\n\nspectra: SpectralTimeSeriesCommonWavelengths\n\nOptional Arguments:\n\nmean: mean spectrum\nderiv: dmeanflux/dlnλ\nequal_weight:  For now, spectra are equal weighted. (true)\n\nOutput named pair:\n\nrv: Vector of vector of estimated radial velocities for each chunk\nσ_rv: Vector of vector of uncertainties in rv estimates for each chunk\n\n\n\n\n\n","category":"method"},{"location":"internals/#RvSpectML.calc_mean_d2fluxdlnlambda2-Union{Tuple{URT}, Tuple{T3}, Tuple{T2}, Tuple{T1}, Tuple{AbstractMatrix{T1}, AbstractMatrix{T1}, AbstractVector{T3}, AbstractVector{URT}}} where {T1<:Real, T2<:Real, T3<:Real, URT<:AbstractUnitRange}","page":"Internals","title":"RvSpectML.calc_mean_d2fluxdlnlambda2","text":"Return mean numerical derivative (d²flux/dlnλ²) based on a common set of wavelengths. Inputs:\n\nflux (2d)\nvar (2d)\nλ (1d)\nchunk_map: Array of ranges specifying how each chunk maps into indexes of output derivative\n\nOutput:\n\nd²flux/dlnλ²: (1d)\n\n\n\n\n\n\n\n","category":"method"},{"location":"internals/#RvSpectML.calc_mean_dfluxdlnlambda-Union{Tuple{URT}, Tuple{T3}, Tuple{T2}, Tuple{T1}, Tuple{AbstractMatrix{T1}, AbstractMatrix{T1}, AbstractVector{T3}, AbstractVector{URT}}} where {T1<:Real, T2<:Real, T3<:Real, URT<:AbstractUnitRange}","page":"Internals","title":"RvSpectML.calc_mean_dfluxdlnlambda","text":"Return mean numerical derivative (dflux/dlnλ) based on a common set of wavelengths. Inputs:\n\nflux (2d)\nvar (2d)\nλ (1d)\nchunk_map: Array of ranges specifying how each chunk maps into indexes of output derivative\n\nOutput:\n\ndflux/dlnλ: (1d)\n\n\n\n\n\n\n\n","category":"method"},{"location":"internals/#RvSpectML.calc_mean_spectrum-Union{Tuple{T2}, Tuple{T1}, Tuple{AbstractMatrix{T1}, AbstractMatrix{T2}}} where {T1<:Real, T2<:Real}","page":"Internals","title":"RvSpectML.calc_mean_spectrum","text":"Return mean flux (averaging over observations at different times, variance weighted) based on a common set of wavelengths.    Inputs: flux & var (2d: pixel, time)\n\n\n\n\n\n","category":"method"},{"location":"internals/#RvSpectML.calc_running_mean_weighted-Union{Tuple{AbstractVector{T1}}, Tuple{T2}, Tuple{T1}} where {T1<:Real, T2<:Real}","page":"Internals","title":"RvSpectML.calc_running_mean_weighted","text":"Smooth array via weighted running mean of n consecutive points \n\n\n\n\n\n","category":"method"},{"location":"internals/#RvSpectML.calc_rvs_from_taylor_expansion-Union{Tuple{RT}, Tuple{DT}, Tuple{T2}, Tuple{MT}, Tuple{T1}, Tuple{STS}} where {STS<:RvSpectMLBase.AbstractSpectralTimeSeriesCommonWavelengths, T1<:Real, MT<:AbstractVector{T1}, T2<:Real, DT<:AbstractVector{T2}, RT<:AbstractUnitRange}","page":"Internals","title":"RvSpectML.calc_rvs_from_taylor_expansion","text":"calc_rvs_from_taylor_expansion( spectra ) Inputs:\n\nspectra: SpectralTimeSeriesCommonWavelengths\n\nOptional Arguments:\n\nmean: mean spectrum\nderiv: dmeanflux/dlnλ\nidx: range of pixel indcies to use for calculation\nequal_weight:  For now, spectra are equal weighted. (true)\n\nOutput named pair:\n\nrv: Vector of estimated radial velocities\nσ_rv: Vector of uncertainties in rv estimates\n\n\n\n\n\n","category":"method"},{"location":"internals/#RvSpectML.calc_rvs_from_taylor_expansion_alt-Union{Tuple{RT}, Tuple{DT}, Tuple{T2}, Tuple{MT}, Tuple{T1}, Tuple{STS}} where {STS<:RvSpectMLBase.AbstractSpectralTimeSeriesCommonWavelengths, T1<:Real, MT<:AbstractVector{T1}, T2<:Real, DT<:AbstractVector{T2}, RT<:AbstractUnitRange}","page":"Internals","title":"RvSpectML.calc_rvs_from_taylor_expansion_alt","text":"calc_rvs_from_taylor_expansion_alt( spectra ) Experimental version of calcrvsfromtaylorexpansion.\n\n\n\n\n\n","category":"method"},{"location":"internals/#RvSpectML.get_line_shapes-Union{Tuple{A2}, Tuple{T2}, Tuple{A1}, Tuple{T1}, Tuple{A1, RvSpectMLBase.AbstractChunkListTimeseries}} where {T1<:Real, A1<:AbstractVector{T1}, T2<:Real, A2<:AbstractVector{T2}}","page":"Internals","title":"RvSpectML.get_line_shapes","text":"getlineshapes(linelist, clt, fracdepths, vwidth, RVestimate, verbose) For each spectrum in clt, returns arrays for line bisector and width as a function of fractional line depth given in fracdepths. Note that fracdepths must be sorted from largest to smallest. Also returns arrays for line depth, presently a simple minimum over the line's pixels, and valid lines, a boolean array for which lines' shape measurements were calculated successfully. vwidth is the width of the window (in m/s) around each line's center to use. RVestimate (in m/s) is a rough estimate of the star's RV. Note: RVestimate shifts the line centers in linelist to the RV of star, so use RVestimate=0 if linelist is already aligned to star.\n\n\n\n\n\n","category":"method"},{"location":"internals/#RvSpectML.get_line_shapes-Union{Tuple{A3}, Tuple{T3}, Tuple{A2}, Tuple{T2}, Tuple{A1}, Tuple{T1}, Tuple{A1, RvSpectMLBase.AbstractChunkList}} where {T1<:Real, A1<:AbstractVector{T1}, T2<:Real, A2<:AbstractVector{T2}, T3<:Real, A3<:AbstractVector{T3}}","page":"Internals","title":"RvSpectML.get_line_shapes","text":"getlineshapes(linelist, chunklist, chunkcenters, fracdepths, vwidth, RVestimate, verbose) For a single spectrum in chunklist, returns arrays for line bisector and width as a function of fractional line depth given in fracdepths. Note that fracdepths must be sorted from largest to smallest. Also returns arrays for line depth, presently a simple minimum over the line's pixels, and valid lines, a boolean array for which lines' shape measurements were calculated successfully. vwidth is the width of the window (in m/s) around each line's center to use. RVestimate (in m/s) is a rough estimate of the star's RV. Note: RVestimate shifts the line centers in linelist to the RV of star, so use RVestimate=0 if line_list is already aligned to star.\n\n\n\n\n\n","category":"method"},{"location":"internals/#RvSpectML.get_obs_loc-Tuple{Symbol}","page":"Internals","title":"RvSpectML.get_obs_loc","text":"getobsloc(obs::Symbol)  Returns a Dict with long & lat (degrees) and elevation (km)  Warning: Currently only has info for :WIYN and :HARPSN.\n\n\n\n\n\n","category":"method"},{"location":"internals/#RvSpectML.make_template_spectra-Tuple{ACLT} where ACLT<:RvSpectMLBase.AbstractChunkListTimeseries","page":"Internals","title":"RvSpectML.make_template_spectra","text":"maketemplatespectra( chunklisttimeseries, [ options ] ) Combine portions of spectra in a ChunkListTimeseries into a template stored as a SpectralTimeSeriesCommonWavelengths. Optionally remove radial velocities before combining spectra based on the :rv_est field in metadata.\n\nInputs:\n\nchunklisttimeseries\n\nOptional Parametes:\n\nremovervest (true)\noversample_factor (1)\nsmooth_factor (1)\nalg (:TemporalGP)\n\nOutputs\n\nmatrix:  timeseries interpolated to each wavelength in the form of a SpectralTimeSeriesCommonWavelengths\nf_mean:  mean flux\nvar_mean: variance of mean flux (WARNING: Not computed accurately yet)\nderiv:  dflux/dlnλ averaged over spectra\nderiv2: d²flux/dlnλ² averaged over spectra\n\n\n\n\n\n","category":"method"},{"location":"internals/#RvSpectML.repack_flux_vector_to_chunk_matrix-Union{Tuple{CMT}, Tuple{AA4}, Tuple{T4}, Tuple{AA3}, Tuple{T3}, Tuple{AA2}, Tuple{T2}, Tuple{AA1}, Tuple{T1}, Tuple{AA1, AA2, AA3, CMT, AA4}} where {T1<:Real, AA1<:AbstractVector{T1}, T2<:Real, AA2<:AbstractVector{T2}, T3<:Real, AA3<:AbstractVector{T3}, T4<:Real, AA4<:AbstractVector{T4}, CMT<:(AbstractArray{UnitRange{Int64}, N} where N)}","page":"Internals","title":"RvSpectML.repack_flux_vector_to_chunk_matrix","text":"repackfluxvectortochunkmatrix(λ, flux, var, chunkmap, λc; alg ) Warning:  This doesn't work yet\n\n\n\n\n\n","category":"method"},{"location":"internals/#Radial-Velocity-Related","page":"Internals","title":"Radial Velocity Related","text":"","category":"section"},{"location":"internals/","page":"Internals","title":"Internals","text":"Modules = [RvSpectML.DCPCA, RvSpectML.LineFinder ] #, RvSpectML.PPCA ]\nPublic = false\nOrder = [ :function ]","category":"page"},{"location":"internals/#RvSpectML.LineFinder.find_line_candidates_in_chunk-Union{Tuple{T}, Tuple{RvSpectMLBase.AbstractChunkOfSpectrum, AbstractVector{T}}} where T<:Real","page":"Internals","title":"RvSpectML.LineFinder.find_line_candidates_in_chunk","text":"find_lines_candidates_in_chunk( chunk, plan ) Convenience function to find links in one chunk of spectrum.\n\nInputs:\n\nchunk: ChunkOfSpectrum to be analyzed\nderiv2: array of second derivative with respect to log λ\n\nOptional Arguments:\n\nplan: LineFinderPlan\n\nReturns DataFrame containing keys:\n\npixels: array of ranges of pixels wihtin chunk\npixelmaxd2fdlnλ2: pixel with maximum 2nd derivative\n\n\n\n\n\n","category":"method"},{"location":"internals/#RvSpectML.LineFinder.find_lines_in_chunk-Union{Tuple{RvSpectMLBase.AbstractChunkOfSpectrum}, Tuple{T}} where T<:Real","page":"Internals","title":"RvSpectML.LineFinder.find_lines_in_chunk","text":"findlinesin_chunk( chunk, plan ) Convenience function to find lines in one chunk of spectrum.\n\nInputs:\n\nchunk\n\nOptional Arguments:\n\nplan: LineFinderPlan\nchunkid: If provide non-zero values, then add column `chunkid` to resulting DataFrame\nobsid: If provide non-zero values, then add column `obsid` to resulting DataFrame\nkeepbadfits:  If true, then does not filter out non-converged and other bad line fits from resulting dataframe\nverbose: If true, prints extra debugging info.\n\nReturn:\n\nlinefitlist:  DataFrame with results of fit to each line\n\n\n\n\n\n","category":"method"},{"location":"internals/#RvSpectML.LineFinder.find_lines_in_chunklist-Tuple{RvSpectMLBase.AbstractChunkList}","page":"Internals","title":"RvSpectML.LineFinder.find_lines_in_chunklist","text":"findlinesinchunklist ( chunklist, linelist ) Convenience function to find lines in each chunk of a spectrum.\n\nInputs:\n\nchunklist\n\nOptional Arguments:\n\nplan:  LineFinderPlan\nkeepbadfits:  If true, then does not filter out non-converged and other bad line fits from resulting dataframe\nverbose: If true, prints extra debugging info.\n\nReturn:\n\nline_list: DataFrame results of fit to each line\n\n\n\n\n\n","category":"method"},{"location":"internals/#RvSpectML.LineFinder.find_lines_in_chunklist_timeseries-Tuple{RvSpectMLBase.AbstractChunkListTimeseries}","page":"Internals","title":"RvSpectML.LineFinder.find_lines_in_chunklist_timeseries","text":"find_lines_in_chunklist_timeseries( chunklist_timeseries, line_list ) Convenience function to find lines in each chunk of each spectrum in a timeseries.\n\nInputs:\n\nchunklist_timeseries\n\nOptional Arguments:\n\nplan:  LineFinderPlan\nkeepbadfits:  If true, then does not filter out non-converged and other bad line fits from resulting dataframe\nverbose: If true, prints extra debugging info.\n\nReturn:\n\nlinelist: Array of results from [findlinesinchunklist](@ref)\n\n\n\n\n\n","category":"method"},{"location":"internals/#RvSpectML.LineFinder.find_pixels_for_all_lines_in_chunklist-Tuple{RvSpectMLBase.AbstractChunkList, DataFrames.DataFrame}","page":"Internals","title":"RvSpectML.LineFinder.find_pixels_for_all_lines_in_chunklist","text":"find_pixels_for_all_lines_in_chunklist( chunk_list, lines) Return array giving range of pixels for each line within provided chunklist Inputs:\n\nchunk_list\nlines: DataFrame containing keys: :fit_min_λ, :fit_max_λ, :chunk_id\n\nOutput:\n\nVector of pixel ranges\n\n\n\n\n\n","category":"method"},{"location":"internals/#RvSpectML.LineFinder.fit_all_lines_in_chunklist_timeseries-Union{Tuple{T1}, Tuple{RvSpectMLBase.AbstractChunkListTimeseries, DataFrames.DataFrame}} where T1<:Real","page":"Internals","title":"RvSpectML.LineFinder.fit_all_lines_in_chunklist_timeseries","text":"fit_line_in_chunklist_timeseries( chunk_list_timeseries, λmin, λmax ) Return DataFrame with results of fits to each line in a chunklisttimeseries (including each observation time) Inputs:\n\nchunklisttimeseries: Data to fit\nλmin\nλmax\nchunk_index:  Restricts fitting to specified chunk\n\nOutputs a DataFrame with keys:\n\nfit_a: Normalization of continuum around line\nfit_λc: Central wavelength\nfit_depth: Line depth\nfit_σ²:\nfit_b: Slope of continuum around line\nfit_covar: Covariance matrix for fit parameters\nχ²perdof: quality of fit to chunk\nfit_converged: Bool indicating if LsqFit converged\nobsidx: index of observation in chunklist_timeseries\nchunkid: index of chunk in chunklist_timeseries\npixels: range of pixels that was fit\n\n\n\n\n\n","category":"method"},{"location":"internals/#RvSpectML.LineFinder.fit_line-Union{Tuple{T3}, Tuple{T2}, Tuple{T1}, Tuple{AbstractVector{T1}, AbstractVector{T2}, AbstractVector{T3}}} where {T1<:Real, T2<:Real, T3<:Real}","page":"Internals","title":"RvSpectML.LineFinder.fit_line","text":"fitline( λ, flux, var ) Fits a basic Gaussian absorption line times a line (variable slope) to data. Returns a tuple of (param, χ²perdof, isconverged) Warning:  Has some hardcoded parameters that likely need to be generalized for different instruments.\n\n\n\n\n\n","category":"method"},{"location":"internals/#RvSpectML.LineFinder.fit_line_in_chunklist_timeseries-Union{Tuple{T1}, Tuple{RvSpectMLBase.AbstractChunkListTimeseries, Real, Real, Real, Integer}} where T1<:Real","page":"Internals","title":"RvSpectML.LineFinder.fit_line_in_chunklist_timeseries","text":"fit_line_in_chunklist_timeseries( chunk_list_timeseries, λc, min, λmax, chunk_index) Return DataFrame with results of fits to each line in a given chunk of chunklisttimeseries (including each observation time) Inputs:\n\nchunklisttimeseries: Data to fit\nλc\nλmin\nλmax\nchunk_index:  Restricts fitting to specified chunk\n\nOutputs a DataFrame with keys:\n\nfit_a: Normalization of continuum around line\nfit_λc: Central wavelength\nfit_depth: Line depth\nfit_σ²:\nfit_b: Slope of continuum around line\nfit_covar: Covariance matrix for fit parameters\nχ²perdof: quality of fit to chunk\nfit_converged: Bool indicating if LsqFit converged\nobsidx: index of observation in chunklist_timeseries\nchunkid: index of chunk in chunklist_timeseries\npixels: range of pixels that was fit\n\n\n\n\n\n","category":"method"},{"location":"internals/#RvSpectML.LineFinder.line_model-Union{Tuple{T2}, Tuple{T1}, Tuple{Union{AbstractVector{T1}, T1}, AbstractVector{T2}}} where {T1<:Real, T2<:Real}","page":"Internals","title":"RvSpectML.LineFinder.line_model","text":"line_model( λ, θ ) Calculate model for one Gaussian absorption line evaluated at wavelengths λ Input is an array that will be passed to unpack. Currently assumed to be chunk normalization, central wavelength, depth, σ² and slope of normalization within chunk.\n\n\n\n\n\n","category":"method"},{"location":"internals/#RvSpectML.LineFinder.pack-Union{Tuple{}, Tuple{T5}, Tuple{T4}, Tuple{T3}, Tuple{T2}, Tuple{T1}} where {T1<:Real, T2<:Real, T3<:Real, T4<:Real, T5<:Real}","page":"Internals","title":"RvSpectML.LineFinder.pack","text":"Utility function for line_model.  Don't assume will remain unchanged in future versions.\n\n\n\n\n\n","category":"method"},{"location":"internals/#RvSpectML.LineFinder.unpack-Union{Tuple{AbstractVector{T}}, Tuple{T}} where T<:Real","page":"Internals","title":"RvSpectML.LineFinder.unpack","text":"Utility function for line_model.  Don't assume will remain unchanged in future versions.\n\n\n\n\n\n","category":"method"},{"location":"internals/#Interpolation","page":"Internals","title":"Interpolation","text":"","category":"section"},{"location":"internals/","page":"Internals","title":"Internals","text":"Modules = [RvSpectML.LinearInterpolation, RvSpectML.SincInterpolation, RvSpectML.TemporalGPInterpolation ]  # RvSpectML.GPInterpolation,\nPublic = false\nOrder = [ :function]","category":"page"},{"location":"internals/#RvSpectML.SincInterpolation.create_filter_curve_orig-Tuple{Int64}","page":"Internals","title":"RvSpectML.SincInterpolation.create_filter_curve_orig","text":"Original author: Joe Ninan Converted to Julia and optimized by Christian Gilbertson & Eric Ford Returns a cubit interpolator for windowed sinc Filter curve. noofpoints: number of intepolation points to use in cubic inteprolator\n\n\n\n\n\n","category":"method"},{"location":"internals/#RvSpectML.TemporalGPInterpolation.predict_gp_mean_var-Union{Tuple{AA3}, Tuple{T3}, Tuple{AGP}, Tuple{AGP, AA3}, Tuple{AGP, AA3, Bool}, Tuple{AGP, AA3, Bool, Bool}} where {AGP<:AbstractGPs.GP, T3<:Real, AA3<:AbstractVector{T3}}","page":"Internals","title":"RvSpectML.TemporalGPInterpolation.predict_gp_mean_var","text":"predictgpmeanvar(gp, xpred ; uselogx, use_logy) Inputs:\n\ngp:\nxpred: Locations to predict GP at\n\nOptional inputs:\n\nuse_logx: If true, apply log transform to xpred before evaluating GP\nuse_logy: If true, apply exp transform after evaluating GP\n\nReturns tuple with vector of means and variance of GP posterior at locations in xpred.\n\n\n\n\n\n","category":"method"},{"location":"internals/#Other","page":"Internals","title":"Other","text":"","category":"section"},{"location":"internals/","page":"Internals","title":"Internals","text":"Modules = [Pipeline  ]\nPublic = false\nOrder = [:function]","category":"page"},{"location":"internals/#Types","page":"Internals","title":"Types","text":"","category":"section"},{"location":"internals/#General-purpose-2","page":"Internals","title":"General purpose","text":"","category":"section"},{"location":"internals/","page":"Internals","title":"Internals","text":"Modules = [RvSpectML ]\nPublic = false\nOrder = [:type ]","category":"page"},{"location":"internals/#Radial-Velocity-Related-2","page":"Internals","title":"Radial Velocity Related","text":"","category":"section"},{"location":"internals/","page":"Internals","title":"Internals","text":"Modules = [ RvSpectML.DCPCA, RvSpectML.LineFinder ] #, RvSpectML.PPCA ]\nPublic = false\nOrder = [:type ]","category":"page"},{"location":"internals/#RvSpectML.LineFinder.LineFinderPlan","page":"Internals","title":"RvSpectML.LineFinder.LineFinderPlan","text":"Struct containing parameters for running LineFinder \n\n\n\n\n\n","category":"type"},{"location":"internals/#RvSpectML.LineFinder.LineFinderPlan-Tuple{}","page":"Internals","title":"RvSpectML.LineFinder.LineFinderPlan","text":"Create a LineFinderPlan Optional Inputs:\n\nline_width (default 5,000 m/s)\nminderiv2 (defaultmin_deriv2)\nsmoothfactor (defaultsmooth_factor)\nminpixelsinline (defaultminpixelsin_line)\nuselogλ (defaultuse_logλ),\nuselogflux (defaultuse_logflux)\n\n\n\n\n\n","category":"method"},{"location":"internals/#Interpolation-2","page":"Internals","title":"Interpolation","text":"","category":"section"},{"location":"internals/","page":"Internals","title":"Internals","text":"Modules = [RvSpectML.LinearInterpolation, RvSpectML.SincInterpolation, RvSpectML.TemporalGPInterpolation ]  # RvSpectML.GPInterpolation,\nPublic = false\nOrder = [:type ]","category":"page"},{"location":"internals/#Other-2","page":"Internals","title":"Other","text":"","category":"section"},{"location":"internals/","page":"Internals","title":"Internals","text":"Modules = [Pipeline  ]\nPublic = false\nOrder = [:type]","category":"page"},{"location":"modules/","page":"Modules","title":"Modules","text":"CurrentModule = RvSpectML","category":"page"},{"location":"modules/#RvSpectML-Modules","page":"Modules","title":"RvSpectML Modules","text":"","category":"section"},{"location":"modules/","page":"Modules","title":"Modules","text":"Pages = [\"modules.md\"]\nDepth = 3","category":"page"},{"location":"modules/#RV-Related-Algorithms","page":"Modules","title":"RV-Related Algorithms","text":"","category":"section"},{"location":"modules/","page":"Modules","title":"Modules","text":"Modules = [ RvSpectML.DCPCA, RvSpectML.LineFinder ] #, RvSpectML.PPCA ]\nOrder = [:module]","category":"page"},{"location":"modules/#RvSpectML.DCPCA","page":"Modules","title":"RvSpectML.DCPCA","text":"Module for performing a Doppler-constrained PCA analysis\n\nFor algorithm information, see:\n\nJones, Stenning, Ford et al. https://arxiv.org/abs/1711.01318\nSee also: Gilbertson, Ford, Jones & Stenning 2020 https://arxiv.org/abs/2009.01085\n\nAuthor: Eric Ford Date:   September 2020\n\n\n\n\n\n","category":"module"},{"location":"modules/#Interpolation-Algorithms","page":"Modules","title":"Interpolation Algorithms","text":"","category":"section"},{"location":"modules/","page":"Modules","title":"Modules","text":"Modules = [RvSpectML.LinearInterpolation, RvSpectML.SincInterpolation, RvSpectML.TemporalGPInterpolation ]  # RvSpectML.GPInterpolation,\nOrder = [:module]","category":"page"},{"location":"modules/#RvSpectML.LinearInterpolation","page":"Modules","title":"RvSpectML.LinearInterpolation","text":"Module with wrappers for performing linear interpolation..\n\nAuthor: Eric Ford\n\n\n\n\n\n","category":"module"},{"location":"modules/#RvSpectML.SincInterpolation","page":"Modules","title":"RvSpectML.SincInterpolation","text":"Module for performing Sinc interpolation From https://github.com/christiangil/GP-Research/blob/master/julia/src/interpolationfunctions.jl https://github.com/christiangil/GP-Research/blob/master/julia/src/generalfunctions.jl\n\nAuthors: Joe Ninan (original)          Christian Gilbertson (Converted to Julia and optimized)          Eric Ford (Further adapted/optimizations)\n\n\n\n\n\n","category":"module"},{"location":"modules/#RvSpectML.TemporalGPInterpolation","page":"Modules","title":"RvSpectML.TemporalGPInterpolation","text":"Module for interpolating via Gaussian Process Regression based on Stheno and TemporalGPs packages.\n\n\n\n\n\n","category":"module"},{"location":"modules/#Other-Modules","page":"Modules","title":"Other Modules","text":"","category":"section"},{"location":"modules/","page":"Modules","title":"Modules","text":"Modules = [Pipeline  ]\nOrder = [:module]","category":"page"}]
}
